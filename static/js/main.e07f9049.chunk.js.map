{"version":3,"sources":["static/images/logo.svg","static/images/facebook.svg","static/images/twitter.svg","static/images/youtube.svg","static/images/soundcloud.svg","static/images/volume.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","logo","alt","fb","twt","ytb","scld","vol","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,+PCiD5BC,MAxCf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,WACf,yBAAKA,UAAU,kBACb,yBAAKC,IAAKC,IAAMC,IAAI,SACpB,yBAAKH,UAAU,gBACb,sCAAe,8BACf,uCAAgB,8BAChB,uCAAgB,8BAChB,qCAAc,8BACd,uCAAgB,gCAGpB,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,gBACb,uCACA,yCACA,qCAEF,yBAAKA,UAAU,iBACb,yCACA,yBAAKC,IAAKG,IAAID,IAAI,aAClB,yBAAKF,IAAKI,IAAKF,IAAI,YACnB,yBAAKF,IAAKK,IAAKH,IAAI,YACnB,yBAAKF,IAAKM,IAAMJ,IAAI,gBAEtB,yBAAKH,UAAU,gBACb,8BACA,8BACA,yBAAKA,UAAU,uBACb,+DAAoC,sCAApC,eACA,yBAAKA,UAAU,SAASC,IAAKO,IAAKL,IAAI,gBC7B9BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e07f9049.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d3565bc1.svg\";","module.exports = __webpack_public_path__ + \"static/media/facebook.1db09742.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.77461980.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube.b916bca0.svg\";","module.exports = __webpack_public_path__ + \"static/media/soundcloud.c3bbb772.svg\";","module.exports = __webpack_public_path__ + \"static/media/volume.6ac3d895.svg\";","import React from 'react'\nimport logo from \"./static/images/logo.svg\"\nimport fb from \"./static/images/facebook.svg\"\nimport twt from \"./static/images/twitter.svg\"\nimport ytb from \"./static/images/youtube.svg\"\nimport scld from \"./static/images/soundcloud.svg\"\nimport vol from \"./static/images/volume.svg\"\nimport './App.scss'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\"></div>\n      <div className=\"main-container\">\n        <img src={logo} alt=\"logo\" />\n        <div className=\"main-buttons\">\n          <h4>EVENTS</h4><div></div>\n          <h4>GALLERY</h4><div></div>\n          <h4>CLIENTS</h4><div></div>\n          <h4>ABOUT</h4><div></div>\n          <h4>CONTACT</h4><div></div>\n        </div>\n      </div>\n      <div className=\"footer-container\">\n        <div className=\"footer-first\">\n          <h5>PRIVACY</h5>\n          <h5>COMMUNITY</h5>\n          <h5>HELP</h5>\n        </div>\n        <div className=\"footer-second\">\n          <h5>FOLLOW US</h5>\n          <img src={fb} alt=\"facebook\" />\n          <img src={twt} alt=\"twitter\" />\n          <img src={ytb} alt=\"youtube\" />\n          <img src={scld} alt=\"soundcloud\" />\n        </div>\n        <div className=\"footer-third\">\n          <div></div>\n          <div></div>\n          <div className=\"copyright-container\">\n            <h5>ALL WORK COPYRIGHT OF STARGAZER <span>&copy;</span> 2020-2022 </h5>\n            <img className=\"volume\" src={vol} alt=\"volume\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}